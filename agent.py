#!/usr/bin/env python3
"""
Hypnotic NFT Agent v3.0 - Clean Architecture
Gera NFTs e inicia marketplace automaticamente
"""

import os
import json
import time
import random
import hashlib
import requests
import subprocess
import threading
from typing import Dict, List, Optional
from dataclasses import dataclass
from pathlib import Path
from dotenv import load_dotenv
from datetime import datetime
import sys

# Carrega vari√°veis de ambiente
load_dotenv()

# Configura√ß√£o da API DeepSeek
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")
DEEPSEEK_API_URL = "https://api.deepseek.com/v1/chat/completions"

@dataclass
class NFTArtwork:
    name: str
    description: str
    style: str
    rarity: str
    price: float
    attributes: Dict[str, any]
    svg_code: str
    
class HypnoticNFTAgent:
    def __init__(self):
        self.model = "deepseek-reasoner"
        self.max_tokens = 20000
        
        # Estrutura limpa de diret√≥rios
        self.nfts_dir = Path.cwd() / "nfts"
        self.nfts_dir.mkdir(exist_ok=True)
        
        print(f"üìÅ Diret√≥rio NFTs: {self.nfts_dir}")
        
        # Contadores
        self.nft_counter = 0
        self.session_start = time.time()
        self.session_cost = 0
        self.marketplace_process = None
        
        # Estilos art√≠sticos
        self.art_styles = [
            "Hypnotic Spirals", "Psychedelic Mandala", "Kaleidoscope Dreams",
            "Fractal Evolution", "Sacred Geometry Motion", "DMT Visual Journey",
            "Quantum Particles", "Neural Network", "Data Flow Streams",
            "Holographic Interface", "Neon Circuit Board", "Digital DNA Helix",
            "Bioluminescent Ocean", "Crystal Formation", "Liquid Metal Flow",
            "Aurora Borealis", "Plasma Energy", "Living Coral Reef",
            "Generative Waves", "Particle Symphony", "Color Transitions",
            "Geometric Metamorphosis", "Perlin Noise Flow", "Voronoi Evolution",
            "Galaxy Formation", "Black Hole", "Nebula Birth", "Solar Flare",
            "Glitch Cascade", "Digital Decay", "Reality Fragmentation",
            "Third Eye Activation", "Chakra Flow", "Kundalini Rising",
            "4D Hypercube", "Tesseract", "Klein Bottle", "Time Crystal"
        ]
        
        # Raridades e pre√ßos
        self.rarity_config = {
            "Common": {"chance": 0.40, "base_price": 40, "multiplier": 1},
            "Rare": {"chance": 0.30, "base_price": 100, "multiplier": 1.5},
            "Epic": {"chance": 0.20, "base_price": 250, "multiplier": 2},
            "Legendary": {"chance": 0.10, "base_price": 500, "multiplier": 3}
        }
        
    def start_marketplace(self):
        """Inicia o marketplace em background"""
        def run_marketplace():
            try:
                print("\nüõçÔ∏è Iniciando Marketplace...")
                self.marketplace_process = subprocess.Popen(
                    [sys.executable, "marketplace.py"],
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True
                )
                
                # Aguarda marketplace iniciar
                time.sleep(3)
                print("‚úÖ Marketplace rodando em http://localhost:5000")
                
            except Exception as e:
                print(f"‚ùå Erro ao iniciar marketplace: {e}")
        
        # Executa em thread separada
        marketplace_thread = threading.Thread(target=run_marketplace, daemon=True)
        marketplace_thread.start()
    
    def generate_unique_name(self) -> str:
        """Gera nome √∫nico e criativo"""
        prefixes = ["Ethereal", "Quantum", "Cosmic", "Neural", "Hypnotic", 
                   "Celestial", "Digital", "Infinite", "Prismatic", "Temporal"]
        subjects = ["Vortex", "Portal", "Nexus", "Matrix", "Flow", "Dream", 
                   "Vision", "Pulse", "Wave", "Spiral", "Realm", "Echo"]
        
        return f"{random.choice(prefixes)} {random.choice(subjects)}"
    
    def determine_rarity(self) -> str:
        """Determina raridade baseada em probabilidades"""
        rand = random.random()
        cumulative = 0
        for rarity, config in self.rarity_config.items():
            cumulative += config["chance"]
            if rand <= cumulative:
                return rarity
        return "Common"
    
    def calculate_price(self, rarity: str, complexity: int) -> float:
        """Calcula pre√ßo baseado em raridade e complexidade"""
        config = self.rarity_config[rarity]
        base = config["base_price"]
        multiplier = config["multiplier"]
        
        # Ajusta por complexidade (1-10)
        complexity_bonus = 1 + (complexity / 20)
        
        return round(base * multiplier * complexity_bonus, 2)
    
    def estimate_cost(self, tokens: int) -> float:
        """Estima custo da gera√ß√£o"""
        cost_per_1k = 0.014
        current_hour = time.gmtime().tm_hour
        
        # Desconto hor√°rio brasileiro
        if (current_hour >= 16) or (current_hour <= 0):
            cost_per_1k *= 0.25
            
        return (tokens / 1000) * cost_per_1k
    
    def generate_artwork(self) -> NFTArtwork:
        """Gera uma obra de arte NFT"""
        style = random.choice(self.art_styles)
        rarity = self.determine_rarity()
        name = self.generate_unique_name()
        
        # Complexidade por raridade
        complexity_map = {
            "Common": {"min_animations": 6, "complexity": 6, "colors": 4},
            "Rare": {"min_animations": 10, "complexity": 7, "colors": 6},
            "Epic": {"min_animations": 15, "complexity": 8, "colors": 8},
            "Legendary": {"min_animations": 20, "complexity": 10, "colors": 10}
        }
        
        reqs = complexity_map[rarity]
        
        # Paletas de cores por estilo
        color_palettes = {
            "Hypnotic Spirals": ["#FF006E", "#FB5607", "#FFBE0B", "#8338EC", "#3A86FF"],
            "Psychedelic Mandala": ["#FF0080", "#FF8C00", "#FFD700", "#00CED1", "#9400D3"],
            "Quantum Particles": ["#00FFFF", "#FF00FF", "#FFFF00", "#00FF00", "#FF1493"],
            "Neural Network": ["#00D9FF", "#00FF88", "#FF0099", "#FFD300", "#9D00FF"],
            "Sacred Geometry Motion": ["#FFD700", "#FF6B6B", "#4ECDC4", "#45B7D1", "#96CEB4"],
            "Neon Circuit Board": ["#39FF14", "#FF1493", "#00CED1", "#FFD700", "#FF00FF"],
            "Galaxy Formation": ["#E94B3C", "#EE7879", "#F6D55C", "#3CAEA3", "#20639B"],
            "Aurora Borealis": ["#00FF41", "#00D4FF", "#FF006E", "#FFDD00", "#FF00DC"]
        }
        
        # Seleciona paleta ou gera uma vibrante
        base_colors = color_palettes.get(style, [
            f"#{random.randint(128,255):02X}{random.randint(0,128):02X}{random.randint(128,255):02X}",
            f"#{random.randint(0,128):02X}{random.randint(128,255):02X}{random.randint(128,255):02X}",
            f"#{random.randint(128,255):02X}{random.randint(128,255):02X}{random.randint(0,128):02X}",
            f"#{random.randint(255,255):02X}{random.randint(0,128):02X}{random.randint(128,255):02X}",
            f"#{random.randint(128,255):02X}{random.randint(0,255):02X}{random.randint(200,255):02X}"
        ])
        
        prompt = f"""
Voc√™ √© um MESTRE em criar arte SVG SURREAL, HIPNOTIZANTE e PROFUNDAMENTE ANIMADA.

CONTEXTO:
- Nome da obra: {name}
- Estilo: {style}
- Raridade: {rarity}
- Cores base sugeridas: {', '.join(base_colors[:reqs['colors']])}

REQUISITOS T√âCNICOS OBRIGAT√ìRIOS:
1. ViewBox: EXATAMENTE viewBox="0 0 1000 1000"
2. Background: Cor s√≥lida ou gradiente radial/linear (NUNCA transparente)
3. M√≠nimo de {reqs['min_animations']} anima√ß√µes DIFERENTES e SINCRONIZADAS
4. TODAS as anima√ß√µes com repeatCount="indefinite"
5. Dura√ß√£o das anima√ß√µes: Varie entre 3s e 30s para criar polirritmia hipn√≥tica
6. Use calcMode="spline" com keySplines para movimentos org√¢nicos

T√âCNICAS DE ANIMA√á√ÉO OBRIGAT√ìRIAS (use TODAS):

1. ROTA√á√ïES HIPN√ìTICAS:
   <animateTransform attributeName="transform" type="rotate" 
    from="0 500 500" to="360 500 500" dur="20s" repeatCount="indefinite"/>
   - Varie: dire√ß√£o (360 ou -360), centro de rota√ß√£o, dura√ß√£o

2. MORPHING DE FORMAS:
   <animate attributeName="d" values="path1;path2;path3;path1" 
    dur="10s" repeatCount="indefinite" calcMode="spline" 
    keySplines="0.5 0 0.5 1;0.5 0 0.5 1"/>
   - Transforme c√≠rculos em estrelas, quadrados em espirais

3. PULSA√á√ïES ORG√ÇNICAS:
   <animate attributeName="r" values="50;80;50" dur="4s" 
    repeatCount="indefinite" calcMode="spline"/>
   - Aplique em raios, larguras, alturas

4. ONDULA√á√ïES DE COR:
   <animate attributeName="fill" values="cor1;cor2;cor3;cor1" 
    dur="8s" repeatCount="indefinite"/>
   - Use nas cores base fornecidas

5. MOVIMENTOS EM PATHS:
   <animateMotion dur="15s" repeatCount="indefinite">
     <mpath href="#pathId"/>
   </animateMotion>
   - Crie paths sinuosos, espirais, lemniscatas

6. OPACIDADE FANTASMAG√ìRICA:
   <animate attributeName="opacity" values="0;1;0" 
    dur="6s" repeatCount="indefinite"/>

7. TRANSFORMA√á√ïES DE ESCALA:
   <animateTransform attributeName="transform" type="scale" 
    values="1;1.5;1" dur="7s" repeatCount="indefinite" additive="sum"/>

8. FILTROS DIN√ÇMICOS:
   - Use feTurbulence com baseFrequency animado
   - feGaussianBlur com stdDeviation vari√°vel
   - feDisplacementMap para distor√ß√µes l√≠quidas

ELEMENTOS VISUAIS OBRIGAT√ìRIOS PARA {style}:
{self._get_style_specific_requirements(style)}

ESTRUTURA SURREAL OBRIGAT√ìRIA:
1. PROFUNDIDADE: M√≠nimo 5 camadas com diferentes velocidades (parallax)
2. ELEMENTOS IMPOSS√çVEIS: Geometrias n√£o-euclidianas, ilus√µes de √≥tica
3. FLUXO L√çQUIDO: Tudo deve fluir como se estivesse submerso
4. SINCRONIZA√á√ÉO: Crie "momentos" onde v√°rias anima√ß√µes se alinham
5. SURPRESAS VISUAIS: Elementos que aparecem/desaparecem periodicamente

EXEMPLO DE ESTRUTURA SVG:
```svg
<svg viewBox="0 0 1000 1000" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <!-- Gradientes animados -->
    <radialGradient id="grad1">
      <stop offset="0%" stop-color="#FF006E">
        <animate attributeName="stop-color" values="#FF006E;#FB5607;#FF006E" dur="5s" repeatCount="indefinite"/>
      </stop>
      <stop offset="100%" stop-color="#3A86FF">
        <animate attributeName="stop-color" values="#3A86FF;#8338EC;#3A86FF" dur="7s" repeatCount="indefinite"/>
      </stop>
    </radialGradient>
    
    <!-- Filtros complexos -->
    <filter id="liquid">
      <feTurbulence baseFrequency="0.02" numOctaves="3">
        <animate attributeName="baseFrequency" values="0.02;0.05;0.02" dur="10s" repeatCount="indefinite"/>
      </feTurbulence>
      <feDisplacementMap in="SourceGraphic" scale="20"/>
    </filter>
    
    <!-- Paths para movimento -->
    <path id="spiral" d="M500,500 Q600,400 500,300 T400,400 T500,500" opacity="0"/>
  </defs>
  
  <!-- Background animado -->
  <rect width="1000" height="1000" fill="url(#grad1)"/>
  
  <!-- Camadas com diferentes velocidades e filtros -->
  <!-- ... elementos surreais aqui ... -->
</svg>
```

IMPORTANTE PARA {rarity}:
- Common: Foco em loops perfeitos e harmonia visual
- Rare: Adicione elementos que quebram o padr√£o periodicamente  
- Epic: M√∫ltiplas dimens√µes visuais interagindo
- Legendary: Transcenda a percep√ß√£o normal, crie portais visuais

PROIBIDO:
- Elementos est√°ticos (TUDO deve se mover)
- Anima√ß√µes abruptas (use sempre easing/splines)
- Cores muito escuras ou muito claras (mantenha vibrante)
- Repeti√ß√µes √≥bvias (varie dura√ß√µes para criar polirritmia)
- SVG com erro de sintaxe

Retorne um JSON V√ÅLIDO:
{{
    "artwork_name": "{name} (ou uma varia√ß√£o po√©tica)",
    "description": "Descri√ß√£o surreal e po√©tica que capture a ess√™ncia hipn√≥tica da obra (3-4 frases)",
    "svg_code": "<!-- SVG COMPLETO E V√ÅLIDO COM TODAS AS ANIMA√á√ïES -->",
    "attributes": {{
        "animation_count": {reqs['min_animations']} (n√∫mero exato de anima√ß√µes),
        "complexity": {reqs['complexity']},
        "hypnotic_factor": n√∫mero de 1-10,
        "primary_colors": {base_colors[:reqs['colors']]},
        "loop_duration": dura√ß√£o do loop mestre em segundos,
        "special_features": ["feature1", "feature2", "feature3"]
    }}
}}

LEMBRE-SE: Esta arte deve ser um PORTAL VISUAL que HIPNOTIZA e TRANSCENDE. Cada elemento deve DAN√áAR em harmonia surreal. O observador deve sentir que est√° olhando para outra dimens√£o!
"""
        
        try:
            print(f"\nüé® Gerando NFT #{self.nft_counter + 1}")
            print(f"   Raridade: {rarity}")
            print(f"   Estilo: {style}")
            
            headers = {
                "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
                "Content-Type": "application/json"
            }
            
            data = {
                "model": self.model,
                "messages": [
                    {"role": "system", "content": "Voc√™ √© um g√™nio criativo especializado em arte SVG surreal e hipnotizante. Voc√™ domina completamente a sintaxe SVG, anima√ß√µes SMIL, filtros, gradientes e transforma√ß√µes. Suas cria√ß√µes s√£o portais visuais para outras dimens√µes. SEMPRE retorne JSON v√°lido com SVG sintaticamente perfeito."},
                    {"role": "user", "content": prompt}
                ],
                "max_tokens": self.max_tokens,
                "temperature": 0.9,
                "response_format": {"type": "json_object"}
            }
            
            response = requests.post(DEEPSEEK_API_URL, headers=headers, json=data)
            response.raise_for_status()
            
            result = json.loads(response.json()['choices'][0]['message']['content'])
            
            # Valida√ß√£o rigorosa
            svg_code = result.get("svg_code", "")
            if not svg_code or len(svg_code) < 500:
                raise ValueError("SVG muito curto")
            
            if not all(tag in svg_code for tag in ["<svg", "<animate", "viewBox=\"0 0 1000 1000\""]):
                raise ValueError("SVG incompleto ou malformado")
            
            animation_count = svg_code.count("<animate")
            if animation_count < reqs['min_animations']:
                raise ValueError(f"Poucas anima√ß√µes: {animation_count} < {reqs['min_animations']}")
            
            # Calcula custo
            tokens = response.json().get('usage', {}).get('total_tokens', 0)
            cost = self.estimate_cost(tokens)
            self.session_cost += cost
            
            # Calcula pre√ßo de venda
            complexity = result["attributes"].get("complexity", reqs['complexity'])
            price = self.calculate_price(rarity, complexity)
            
            artwork = NFTArtwork(
                name=result["artwork_name"],
                description=result["description"],
                style=style,
                rarity=rarity,
                price=price,
                attributes=result["attributes"],
                svg_code=svg_code
            )
            
            print(f"   ‚úÖ Gerado: {artwork.name}")
            print(f"   üé¨ Anima√ß√µes: {animation_count}")
            print(f"   üí∞ Pre√ßo: ${price}")
            print(f"   üí∏ Custo: ${cost:.3f}")
            
            return artwork
            
        except Exception as e:
            print(f"‚ùå Erro: {str(e)}")
            raise
    
    def _get_style_specific_requirements(self, style: str) -> str:
        """Requisitos espec√≠ficos detalhados para cada estilo"""
        requirements = {
            "Hypnotic Spirals": """
- ESPIRAIS LOGAR√çTMICAS em m√∫ltiplas camadas rotacionando em velocidades diferentes
- Use a f√≥rmula: r = a * e^(b*Œ∏) para criar espirais perfeitas
- M√≠nimo 5 espirais com centros deslocados criando interfer√™ncia visual
- Gradientes radiais animados do centro para as bordas
- Efeito de "t√∫nel infinito" com escala diminuindo ao centro""",
            
            "Psychedelic Mandala": """
- SIMETRIA RADIAL perfeita com 6, 8 ou 12 eixos
- Padr√µes fractais recursivos em cada se√ß√£o
- Rota√ß√£o caleidosc√≥pica com diferentes camadas em contra-rota√ß√£o  
- Morphing entre formas geom√©tricas sagradas (flor da vida, sri yantra)
- Cores complementares pulsando em harmonia""",
            
            "Quantum Particles": """
- SISTEMA DE PART√çCULAS com m√≠nimo 50 elementos
- Movimento browniano aleat√≥rio mas suave (use animate com valores m√∫ltiplos)
- Conex√µes din√¢micas entre part√≠culas pr√≥ximas (linhas que aparecem/desaparecem)
- Efeito de "entanglement" - part√≠culas que se movem em sincronia
- Halos de luz pulsantes em cada part√≠cula""",
            
            "Neural Network": """
- REDE DE NEUR√îNIOS com n√≥s pulsantes conectados
- Sinais viajando atrav√©s das conex√µes (use animateMotion)
- Ativa√ß√£o em cascata - quando um n√≥ pulsa, ativa os pr√≥ximos
- Estrutura em camadas com profundidade visual (perspective)
- Sinapses que se formam e dissolvem dinamicamente""",
            
            "Sacred Geometry Motion": """
- FORMAS GEOM√âTRICAS SAGRADAS morphing entre si
- Propor√ß√£o √°urea (1.618) em todos os elementos
- Tetraedro ‚Üí Cubo ‚Üí Octaedro ‚Üí Dodecaedro ‚Üí Icosaedro
- Merkaba rotacionando em m√∫ltiplos eixos
- Sobreposi√ß√£o criando padr√µes de interfer√™ncia""",
            
            "Galaxy Formation": """
- BRA√áOS ESPIRAIS de gal√°xia em rota√ß√£o lenta
- Nebulosas com cores vibrantes e filtros de turbul√™ncia  
- Estrelas nascendo e morrendo (opacity e scale animations)
- Buraco negro central com efeito de distor√ß√£o (feDisplacementMap)
- Poeira c√≥smica com part√≠culas flutuantes""",
            
            "Aurora Borealis": """
- ONDAS DE LUZ fluindo verticalmente
- Gradientes lineares animados simulando cortinas de luz
- Movimento ondulat√≥rio com paths sinusoidais
- Reflexo espelhado na parte inferior (como sobre √°gua)
- Part√≠culas de luz subindo suavemente"""
        }
        
        return requirements.get(style, f"""
- ELEMENTOS CARACTER√çSTICOS do estilo {style}
- Movimento fluido e org√¢nico constante
- Intera√ß√£o visual entre todos os elementos
- Profundidade atrav√©s de camadas e transpar√™ncias
- Surpresas visuais que aparecem periodicamente""")
    
    def save_nft_package(self, artwork: NFTArtwork) -> str:
        """Salva NFT em estrutura limpa"""
        # Cria pasta √∫nica para o NFT
        timestamp = int(time.time())
        folder_name = f"{artwork.rarity.lower()}_{artwork.name.replace(' ', '_')}_{timestamp}"
        nft_path = self.nfts_dir / folder_name
        nft_path.mkdir(exist_ok=True)
        
        # 1. Salva SVG original
        svg_file = nft_path / "artwork.svg"
        with open(svg_file, "w", encoding="utf-8") as f:
            f.write(artwork.svg_code)
        
        # 2. Cria metadata.json
        metadata = {
            "id": hashlib.md5(f"{artwork.name}{timestamp}".encode()).hexdigest()[:8],
            "name": artwork.name,
            "description": artwork.description,
            "price": artwork.price,
            "rarity": artwork.rarity,
            "style": artwork.style,
            "animation_count": artwork.attributes.get("animation_count", 10),
            "complexity": artwork.attributes.get("complexity", 7),
            "hypnotic_factor": artwork.attributes.get("hypnotic_factor", 8),
            "primary_colors": artwork.attributes.get("primary_colors", []),
            "loop_duration": artwork.attributes.get("loop_duration", 20),
            "special_features": artwork.attributes.get("special_features", []),
            "created_at": datetime.now().isoformat(),
            "folder": folder_name
        }
        
        metadata_file = nft_path / "metadata.json"
        with open(metadata_file, "w", encoding="utf-8") as f:
            json.dump(metadata, f, indent=2)
        
        # 3. Cria preview.html protegido
        preview_html = f"""<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{artwork.name} - NFT Preview</title>
    <style>
        * {{ 
            margin: 0; 
            padding: 0; 
            box-sizing: border-box;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
        }}
        
        body {{ 
            background: #ffffff;
            display: flex;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            position: relative;
        }}
        
        .container {{
            width: 90vmin;
            height: 90vmin;
            max-width: 800px;
            max-height: 800px;
            position: relative;
            background: #fff;
            border-radius: 20px;
            box-shadow: 0 10px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }}
        
        svg {{
            width: 100%;
            height: 100%;
            pointer-events: none;
        }}
        
        .watermark {{
            position: absolute;
            bottom: 20px;
            right: 20px;
            background: rgba(0,0,0,0.8);
            color: white;
            padding: 8px 16px;
            border-radius: 8px;
            font-family: Arial, sans-serif;
            font-size: 14px;
            pointer-events: none;
        }}
        
        .info {{
            position: absolute;
            top: 20px;
            left: 20px;
            background: rgba(255,255,255,0.95);
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            font-family: Arial, sans-serif;
        }}
        
        .info h3 {{
            margin: 0 0 5px 0;
            color: #333;
            font-size: 18px;
        }}
        
        .info p {{
            margin: 0;
            color: #666;
            font-size: 14px;
        }}
        
        .rarity {{
            display: inline-block;
            padding: 3px 10px;
            border-radius: 15px;
            font-size: 12px;
            font-weight: bold;
            margin-top: 5px;
        }}
        
        .rarity.common {{ background: #e5e7eb; color: #374151; }}
        .rarity.rare {{ background: #dbeafe; color: #1e40af; }}
        .rarity.epic {{ background: #e9d5ff; color: #6b21a8; }}
        .rarity.legendary {{ background: #fed7aa; color: #92400e; }}
    </style>
</head>
<body oncontextmenu="return false;">
    <div class="container">
        {artwork.svg_code}
        <div class="watermark">PREVIEW</div>
        <div class="info">
            <h3>{artwork.name}</h3>
            <p>{artwork.style}</p>
            <span class="rarity {artwork.rarity.lower()}">{artwork.rarity}</span>
        </div>
    </div>
    
    <script>
        // Prote√ß√µes
        document.addEventListener('contextmenu', e => e.preventDefault());
        document.addEventListener('selectstart', e => e.preventDefault());
        document.addEventListener('dragstart', e => e.preventDefault());
        
        document.addEventListener('keydown', e => {{
            if ((e.ctrlKey || e.metaKey) && (e.key === 's' || e.key === 'S')) {{
                e.preventDefault();
                return false;
            }}
        }});
    </script>
</body>
</html>"""
        
        preview_file = nft_path / "preview.html"
        with open(preview_file, "w", encoding="utf-8") as f:
            f.write(preview_html)
        
        print(f"   üì¶ Salvo em: nfts/{folder_name}/")
        
        return folder_name
    
    def run_generation_loop(self, count: Optional[int] = None):
        """Loop principal de gera√ß√£o"""
        generated = 0
        
        print("\nüöÄ Iniciando gera√ß√£o de NFTs...")
        print("üõë Pressione Ctrl+C para parar\n")
        
        try:
            while True:
                if count and generated >= count:
                    break
                
                self.nft_counter += 1
                generated += 1
                
                # Gera NFT
                artwork = self.generate_artwork()
                
                # Salva pacote
                folder = self.save_nft_package(artwork)
                
                print(f"   ‚è±Ô∏è Total gerados: {self.nft_counter}")
                print(f"   üíµ Gasto acumulado: ${self.session_cost:.2f}\n")
                
                # Pausa entre gera√ß√µes
                if not count or generated < count:
                    time.sleep(3)
                    
        except KeyboardInterrupt:
            print("\n\nüõë Gera√ß√£o interrompida!")
        
        return generated

def main():
    """Fun√ß√£o principal"""
    print("="*60)
    print("üåÄ HYPNOTIC NFT SYSTEM v3.0")
    print("üíé Clean Architecture Edition")
    print("="*60)
    
    # Verifica configura√ß√£o
    if not DEEPSEEK_API_KEY:
        print("\n‚ùå Configure DEEPSEEK_API_KEY no arquivo .env")
        return
    
    if not os.getenv('STRIPE_SECRET_KEY'):
        print("\n‚ö†Ô∏è Configure STRIPE_SECRET_KEY no .env para pagamentos")
    
    agent = HypnoticNFTAgent()
    
    # Inicia marketplace automaticamente
    agent.start_marketplace()
    time.sleep(2)
    
    # Menu de op√ß√µes
    print("\nüìã Op√ß√µes de gera√ß√£o:")
    print("1. Gerar continuamente (infinito)")
    print("2. Gerar quantidade espec√≠fica")
    print("3. Gerar apenas 1 NFT de teste")
    
    choice = input("\nEscolha (1-3): ").strip()
    
    if choice == "2":
        count = int(input("Quantos NFTs? "))
    elif choice == "3":
        count = 1
    else:
        count = None
    
    # Inicia gera√ß√£o
    total = agent.run_generation_loop(count)
    
    # Resumo final
    print(f"\nüìä RESUMO DA SESS√ÉO")
    print(f"="*40)
    print(f"NFTs gerados: {total}")
    print(f"Custo total: ${agent.session_cost:.2f}")
    print(f"Custo m√©dio: ${agent.session_cost/max(total,1):.2f}")
    print(f"\n‚ú® Marketplace continua rodando em http://localhost:5000")
    print("üí° Use Ctrl+C para encerrar tudo")
    
    # Mant√©m o programa rodando
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("\nüëã Encerrando sistema...")
        if agent.marketplace_process:
            agent.marketplace_process.terminate()

if __name__ == "__main__":
    main()